#
# Makefile for executing Lego Workflow modules
#
# Author: Gorka Prieto
# Desc.: Simplified version using only gene-unique peptides
#

# General parameters
#SCORE=LPM
USE_PCMS=false
#FDR=REFINED

# Path parameters
#TARGET_FASTA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/gencode25.target.IL.gorka.fasta
#DECOY_FASTA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/gencode25.decoy.IL.gorka.fasta
#TARGET_FASTA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/gencode25.cont.target.IL.fasta
#DECOY_FASTA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/gencode25.cont.decoy.IL.fasta
TARGET_FASTA_DIR=$(shell dirname $(TARGET_FASTA))
DECOY_FASTA_DIR=$(shell dirname $(DECOY_FASTA))
FASTA_SIZE=$(shell grep -c '^>' $(TARGET_FASTA))
#TARGET_DATA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/Pandey/gencode-v25/Adult_Frontalcortex/xtandem/target
#DECOY_DATA=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/datasets/Pandey/gencode-v25/Adult_Frontalcortex/xtandem/decoy2
#RESULTS=/home/gorka/Bio/Proyectos/Proteómica/spHPP/Work/Flow/fdr/Dec16/Adult_Frontalcortex
PROT2GEN=$(TARGET_FASTA_DIR)/Prot2Gencode25.tsv.gz
FSUF=FDR$(shell echo $(FDR) | cut -c 1 | tr '[:upper:]' '[:lower:]')
SRESULTS=$(RESULTS)/$(SCORE)-$(FSUF)

# Digestion parameters
ENZYME=TRYPSIN
MISS_CLE=2
NTERM=2
USE_DP=true

# Search parameters
PREFIX=decoy-
MIN_PEP_LEN=7
MAX_PEP_LEN=70

# Java settings
JAR=/home/gorka/Aplicaciones/EhuBio.jar
LOGGING=./logging.properties
OPTS=-Xmx16g -Djava.util.logging.config.file=$(LOGGING) -Djava.awt.headless=true

# Aux variables
USAGE=Type "make help" for usage information
ifeq ($(USE_PCMS),true)
FEAT=--features true
else
FEAT=--bestPsm true
endif

# Functions
module=echo; java -cp $(JAR) $(OPTS) org.sphpp.workflow.module.$1 $2 2>&1 | tee -a $(RESULTS)/log.txt

# Main targets
.PHONY: all clean cfg parse psm pep prot gen grp install help
help:
	@echo
	@echo "Usage:"
	@echo "\tmake [<PARAM1>=<value1> <PARAM2>=<value2> ...] [<target>]"
	@echo
	@echo "Where <target> can be any of:"
	@echo "\thelp:\t\tShows this help screen (default)"
	@echo "\tall:\t\tExecutes the complete workflow"
	@echo "\tcfg:\t\tDetects digestion and search parameter from TARGET_DATA"
	@echo "\tparse:\t\tParses search engine output files"
	@echo "\tpsm:\t\tExecutes workflow until PSM level"
	@echo "\tpep:\t\tExecutes workflow until peptide level"
	@echo "\tprot:\t\tExecutes workflow until protein level"
	@echo "\tgen:\t\tExecutes workflow until gene level"
	@echo "\tclean:\t\tCleans workflow output files"
	@echo
	@echo "General parameters:"
	@echo "\tSCORE:\t\tAny of LP, LPF, LPM, LPFM, LPG, LPGM, LPGC, LPG1, LPGN, LPGB"
	@echo "\tUSE_PCMS:\tUse PCMs (true) or best PSM (false) for peptide score (default: $(USE_PCMS))"
	@echo "\tFDR:\t\tFDR type: NORMAL|MAYU|PICKED|REFINED (default: $(FDR))"
	@echo
	@echo "Path parameters:"
	@echo "\tTARGET_DATA:\tDirectory with search engine output files for target DB"
	@echo "\tDECOY_DATA:\tDirectory with search engine output files for decoy DB"
	@echo "\tRESULTS:\tDirectory for saving output files of the identification workflow"
	@echo "\tTARGET_FASTA:\tPath to target fasta file"
	@echo "\tDECOY_FASTA:\tPath to decoy fasta file"
	@echo "\tPROT2GEN:\tPath to protein to gene relations file"
	@echo "\tLEGO:\t\tPath to Workflow libraries"
	@echo
	@echo "Digestion parameters:"
	@echo "\tENZYME:\t\tTRYPSIN|TRYPSINP (default: $(ENZYME))"
	@echo "\tMISS_CLE:\tNumber of missed cleavages allowed (default: $(MISS_CLE))"
	@echo "\tNTERM:\t\tMaximum N-terminal methionine cleavage length (default: $(NTERM))"
	@echo "\tUSE_DP:\t\tAsp-Pro cleavage: true|false (default: $(USE_DP))"
	@echo
	@echo "Search parameters:"
	@echo "\tPREFIX:\t\tPrefix of decoy entries (default: $(PREFIX))"
	@echo "\tMIN_PEP_LEN:\tMinimum peptide length (default: $(MIN_PEP_LEN))"
	@echo "\tMAX_PEP_LEN:\tMaximum peptide length (default: $(MAX_PEP_LEN))"
	@echo
all: params parse psm pep prot gen grp
clean: params
	rm -f $(RESULTS)/*.tsv.gz $(RESULTS)/*.pdf
cfg: params $(RESULTS)/config.ini
parse: params $(RESULTS)/PsmTarget.tsv.gz $(RESULTS)/PsmDecoy.tsv.gz
psm: params $(RESULTS)/LPPsmTarget.tsv.gz $(RESULTS)/LPPsmDecoy.tsv.gz $(RESULTS)/LPPsmDecoy-log-all.pdf
pep: params $(RESULTS)/FdrPepTarget.tsv.gz $(RESULTS)/FdrPepDecoy.tsv.gz $(RESULTS)/LPPepDecoy-log-all.pdf
prot: params $(RESULTS)/Pep2ProtTarget.tsv.gz $(RESULTS)/Pep2ProtDecoy.tsv.gz
gen: params $(SRESULTS) $(SRESULTS)/FdrGenTarget.tsv.gz $(SRESULTS)/FdrGenDecoy.tsv.gz $(SRESULTS)/LPCorrGenDecoy-log-all.pdf

#
# Params
#

ifneq ($(MAKECMDGOALS),help)
params:	$(RESULTS)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),cfg)
ifndef SCORE
    $(error SCORE is undefined. $(USAGE))
endif
ifndef FDR
    $(error FDR is undefined. $(USAGE))
endif
endif
endif
ifneq ($(MAKECMDGOALS),clean)
ifndef TARGET_DATA
    $(error TARGET_DATA is undefined. $(USAGE))
endif
ifneq ($(MAKECMDGOALS),cfg)
ifndef DECOY_DATA
    $(error DECOY_DATA is undefined. $(USAGE))
endif
endif
endif
ifndef RESULTS
    $(error RESULTS is undefined. $(USAGE))
endif
endif

ifdef RESULTS
$(RESULTS):
	mkdir -p $(RESULTS)
endif

#
# Config
#

$(RESULTS)/config.ini: $(TARGET_DATA) $(TARGET_FASTA)
	@$(call module,ConfigDetector,--input $(TARGET_DATA) --fasta $(TARGET_FASTA) --config $(RESULTS)/config.ini --max 1000)

#
# Parser
#

$(RESULTS)/PsmTarget.tsv.gz: $(TARGET_DATA)
	@$(call module,Parser,--input $(TARGET_DATA) --outputPsm $(RESULTS)/PsmTarget.tsv.gz)
$(RESULTS)/PsmDecoy.tsv.gz: $(DECOY_DATA)
	@$(call module,Parser,--input $(DECOY_DATA) --outputPsm $(RESULTS)/PsmDecoy.tsv.gz)

#
# PSM level
#

$(RESULTS)/CompPsmTarget.tsv.gz $(RESULTS)/CompPsmDecoy.tsv.gz: $(RESULTS)/PsmTarget.tsv.gz $(RESULTS)/PsmDecoy.tsv.gz
	@$(call module,Competitor,--inTarget $(RESULTS)/PsmTarget.tsv.gz --inDecoy $(RESULTS)/PsmDecoy.tsv.gz --outTarget $(RESULTS)/CompPsmTarget.tsv.gz --outDecoy $(RESULTS)/CompPsmDecoy.tsv.gz)

$(RESULTS)/FilterPsmTarget.tsv.gz $(RESULTS)/Seq2PepTarget.tsv.gz $(RESULTS)/Psm2PepTarget.tsv.gz: $(RESULTS)/CompPsmTarget.tsv.gz
	@$(call module,PsmFilter,--input $(RESULTS)/CompPsmTarget.tsv.gz --outputPsm $(RESULTS)/FilterPsmTarget.tsv.gz --outputPep $(RESULTS)/Seq2PepTarget.tsv.gz --relations $(RESULTS)/Psm2PepTarget.tsv.gz --rank 1 $(FEAT))
$(RESULTS)/FilterPsmDecoy.tsv.gz $(RESULTS)/Seq2PepDecoy.tsv.gz $(RESULTS)/Psm2PepDecoy.tsv.gz: $(RESULTS)/CompPsmDecoy.tsv.gz
	@$(call module,PsmFilter --input $(RESULTS)/CompPsmDecoy.tsv.gz --outputPsm $(RESULTS)/FilterPsmDecoy.tsv.gz --outputPep $(RESULTS)/Seq2PepDecoy.tsv.gz --relations $(RESULTS)/Psm2PepDecoy.tsv.gz --rank 1 $(FEAT))

$(RESULTS)/LPPsmTarget.tsv.gz $(RESULTS)/LPPsmDecoy.tsv.gz: $(RESULTS)/FilterPsmTarget.tsv.gz $(RESULTS)/FilterPsmDecoy.tsv.gz
	@$(call module,LPCalculator,--inTarget $(RESULTS)/FilterPsmTarget.tsv.gz --inDecoy $(RESULTS)/FilterPsmDecoy.tsv.gz --outTarget $(RESULTS)/LPPsmTarget.tsv.gz --outDecoy $(RESULTS)/LPPsmDecoy.tsv.gz)

$(RESULTS)/LPPsmDecoy-log-all.pdf: $(RESULTS)/LPPsmDecoy.tsv.gz
	@$(call module,RankPlotter,--input $(RESULTS)/LPPsmDecoy.tsv.gz --output $(RESULTS)/LPPsmDecoy)

#
# Pepide level
#

$(RESULTS)/LPPepTarget.tsv.gz: $(RESULTS)/LPPsmTarget.tsv.gz $(RESULTS)/Psm2PepTarget.tsv.gz
	@$(call module,Integrator,--input $(RESULTS)/LPPsmTarget.tsv.gz --relations $(RESULTS)/Psm2PepTarget.tsv.gz --output $(RESULTS)/LPPepTarget.tsv.gz)
$(RESULTS)/LPPepDecoy.tsv.gz: $(RESULTS)/LPPsmDecoy.tsv.gz $(RESULTS)/Psm2PepDecoy.tsv.gz
	@$(call module,Integrator,--input $(RESULTS)/LPPsmDecoy.tsv.gz --relations $(RESULTS)/Psm2PepDecoy.tsv.gz --output $(RESULTS)/LPPepDecoy.tsv.gz)

$(RESULTS)/LPPepDecoy-log-all.pdf: $(RESULTS)/LPPepDecoy.tsv.gz
	@$(call module,RankPlotter,--input $(RESULTS)/LPPepDecoy.tsv.gz --output $(RESULTS)/LPPepDecoy)

$(RESULTS)/FdrPepTarget.tsv.gz $(RESULTS)/FdrPepDecoy.tsv.gz: $(RESULTS)/LPPepTarget.tsv.gz $(RESULTS)/LPPepDecoy.tsv.gz
	@$(call module,FdrCalculator,--inTarget $(RESULTS)/LPPepTarget.tsv.gz --inDecoy $(RESULTS)/LPPepDecoy.tsv.gz --outTarget $(RESULTS)/FdrPepTarget.tsv.gz --outDecoy $(RESULTS)/FdrPepDecoy.tsv.gz)

#
# Protein level
#

$(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz: $(TARGET_FASTA)
	@$(call module,Digester,--fasta $(TARGET_FASTA) --output $(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz --enzyme $(ENZYME) --missed $(MISS_CLE) --nterm $(NTERM) --dp $(USE_DP) --minPepLen $(MIN_PEP_LEN) --maxPepLen $(MAX_PEP_LEN))
$(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz: $(DECOY_FASTA)
	@$(call module,Digester,--fasta $(DECOY_FASTA) --output $(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz --enzyme $(ENZYME) --missed $(MISS_CLE) --nterm $(NTERM) --dp $(USE_DP) --minPepLen $(MIN_PEP_LEN) --maxPepLen $(MAX_PEP_LEN))

#$(RESULTS)/Pep2ProtTarget.tsv.gz: $(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz $(RESULTS)/Seq2PepTarget.tsv.gz
#	@$(call module,Relator,--upper $(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz --lower $(RESULTS)/Seq2PepTarget.tsv.gz --output $(RESULTS)/Pep2ProtTarget.tsv.gz)
#$(RESULTS)/Pep2ProtDecoy.tsv.gz: $(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz $(RESULTS)/Seq2PepDecoy.tsv.gz
#	@$(call module,Relator,--upper $(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz --lower $(RESULTS)/Seq2PepDecoy.tsv.gz --output $(RESULTS)/Pep2ProtDecoy.tsv.gz)

$(RESULTS)/Pep2ProtTarget.tsv.gz: $(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz $(RESULTS)/LPPepTarget.tsv.gz
	@$(call module,PepRelator,--relations $(TARGET_FASTA_DIR)/Seq2ProtTarget.tsv.gz --peptides $(RESULTS)/LPPepTarget.tsv.gz --output $(RESULTS)/Pep2ProtTarget.tsv.gz)
$(RESULTS)/Pep2ProtDecoy.tsv.gz: $(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz $(RESULTS)/LPPepDecoy.tsv.gz
	@$(call module,PepRelator,--relations $(DECOY_FASTA_DIR)/Seq2ProtDecoy.tsv.gz --peptides $(RESULTS)/LPPepDecoy.tsv.gz --output $(RESULTS)/Pep2ProtDecoy.tsv.gz)

#
# Gene level
#

$(SRESULTS):
	mkdir -p $(SRESULTS)

$(RESULTS)/Pep2GenTarget.tsv.gz: $(PROT2GEN) $(RESULTS)/Pep2ProtTarget.tsv.gz $(RESULTS)/FdrPepTarget.tsv.gz
	@$(call module,Relator,--upper $(PROT2GEN) --lower $(RESULTS)/Pep2ProtTarget.tsv.gz --output $(RESULTS)/Pep2GenTarget.tsv.gz)
$(RESULTS)/Pep2GenDecoy.tsv.gz: $(PROT2GEN) $(RESULTS)/Pep2ProtDecoy.tsv.gz $(RESULTS)/FdrPepDecoy.tsv.gz
	@$(call module,Relator,--upper $(PROT2GEN) --upperPrefix $(PREFIX) --lower $(RESULTS)/Pep2ProtDecoy.tsv.gz --output $(RESULTS)/Pep2GenDecoy.tsv.gz)

$(RESULTS)/UPep2GenTarget.tsv.gz: $(RESULTS)/Pep2GenTarget.tsv.gz
	@$(call module,Uniquer,--input $(RESULTS)/Pep2GenTarget.tsv.gz --output $(RESULTS)/UPep2GenTarget.tsv.gz)
$(RESULTS)/UPep2GenDecoy.tsv.gz: $(RESULTS)/Pep2GenDecoy.tsv.gz
	@$(call module,Uniquer,--input $(RESULTS)/Pep2GenDecoy.tsv.gz --output $(RESULTS)/UPep2GenDecoy.tsv.gz)

$(SRESULTS)/LPCorrGenTarget.tsv.gz: $(RESULTS)/UPep2GenTarget.tsv.gz $(RESULTS)/FdrPepTarget.tsv.gz
	@$(call module,ExtCorrector,--input $(RESULTS)/FdrPepTarget.tsv.gz -r $(RESULTS)/UPep2GenTarget.tsv.gz --output $(SRESULTS)/LPCorrGenTarget.tsv.gz --mode $(SCORE))
$(SRESULTS)/LPCorrGenDecoy.tsv.gz: $(RESULTS)/UPep2GenDecoy.tsv.gz $(RESULTS)/FdrPepDecoy.tsv.gz
	@$(call module,ExtCorrector,--input $(RESULTS)/FdrPepDecoy.tsv.gz -r $(RESULTS)/UPep2GenDecoy.tsv.gz --output $(SRESULTS)/LPCorrGenDecoy.tsv.gz --mode $(SCORE))

$(SRESULTS)/LPCorrGenDecoy-log-all.pdf: $(SRESULTS)/LPCorrGenDecoy.tsv.gz
	@$(call module,RankPlotter,--input $(SRESULTS)/LPCorrGenDecoy.tsv.gz --output $(SRESULTS)/LPCorrGenDecoy)

$(SRESULTS)/FdrGenTarget.tsv.gz $(SRESULTS)/FdrGenDecoy.tsv.gz: $(SRESULTS)/LPCorrGenTarget.tsv.gz $(SRESULTS)/LPCorrGenDecoy.tsv.gz
	@$(call module,FdrCalculator,--inTarget $(SRESULTS)/LPCorrGenTarget.tsv.gz --inDecoy $(SRESULTS)/LPCorrGenDecoy.tsv.gz --outTarget $(SRESULTS)/FdrGenTarget.tsv.gz --outDecoy $(SRESULTS)/FdrGenDecoy.tsv.gz --type $(FDR) --decoyPrefix $(PREFIX))
