//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.11.13 at 12:17:16 PM CET 
//


package org.sphpp.nextprot.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for nameType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="nameType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="name"/>
 *     &lt;enumeration value="region name"/>
 *     &lt;enumeration value="enzyme name"/>
 *     &lt;enumeration value="gene name"/>
 *     &lt;enumeration value="allergen"/>
 *     &lt;enumeration value="CD antigen"/>
 *     &lt;enumeration value="International Nonproprietary Name"/>
 *     &lt;enumeration value="open reading frame"/>
 *     &lt;enumeration value="clone name"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "nameType")
@XmlEnum
public enum NameType {

    @XmlEnumValue("name")
    NAME("name"),
    @XmlEnumValue("region name")
    REGION_NAME("region name"),
    @XmlEnumValue("enzyme name")
    ENZYME_NAME("enzyme name"),
    @XmlEnumValue("gene name")
    GENE_NAME("gene name"),
    @XmlEnumValue("allergen")
    ALLERGEN("allergen"),
    @XmlEnumValue("CD antigen")
    CD_ANTIGEN("CD antigen"),
    @XmlEnumValue("International Nonproprietary Name")
    INTERNATIONAL_NONPROPRIETARY_NAME("International Nonproprietary Name"),
    @XmlEnumValue("open reading frame")
    OPEN_READING_FRAME("open reading frame"),
    @XmlEnumValue("clone name")
    CLONE_NAME("clone name");
    private final String value;

    NameType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static NameType fromValue(String v) {
        for (NameType c: NameType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
